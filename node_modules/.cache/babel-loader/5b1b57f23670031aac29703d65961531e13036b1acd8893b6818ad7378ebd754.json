{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive - gitam.in\\\\Desktop\\\\My files\\\\react\\\\project\\\\my-app\\\\src\\\\DataManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataManager = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [newData, setNewData] = useState('');\n  const [error, setError] = useState('');\n  const [selectedId, setSelectedId] = useState(null);\n\n  // Fetch data from the backend\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/curd/getdata');\n      const result = await response.json();\n      if (response.ok) {\n        setData(result);\n      } else {\n        console.error('Failed to fetch data:', result.message || response.statusText);\n        setError(result.message || 'Failed to fetch data');\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setError('Failed to fetch data');\n    }\n  };\n\n  // Add new data\n  const addData = async () => {\n    if (!newData) {\n      setError('Please enter some data');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/api/curd/adddata', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: newData\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        fetchData(); // Refresh the data list\n        setNewData('');\n        setError('');\n      } else {\n        console.error('Failed to add data:', result.message || response.statusText);\n        setError(result.message || 'Failed to add data');\n      }\n    } catch (error) {\n      console.error('Error adding data:', error);\n      setError('Failed to add data');\n    }\n  };\n\n  // Delete data by ID\n  const deleteData = async id => {\n    try {\n      const response = await fetch('http://localhost:5000/api/curd/deletedata', {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'id': id // Send ID as header\n        }\n      });\n      if (response.ok) {\n        fetchData(); // Refresh the data list\n        setError('');\n      } else {\n        const result = await response.json();\n        console.error('Failed to delete data:', result.message || response.statusText);\n        setError(result.message || 'Failed to delete data');\n      }\n    } catch (error) {\n      console.error('Error deleting data:', error);\n      setError('Failed to delete data');\n    }\n  };\n\n  // Use useEffect to fetch data when the component mounts\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Data Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newData,\n        onChange: e => setNewData(e.target.value),\n        placeholder: \"Enter new data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addData,\n        children: \"Add Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [item.name, \" (ID: \", item.id, \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteData(item.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(DataManager, \"lT2Nnnp+KLOlXZ4hftUZd83sdgw=\");\n_c = DataManager;\nexport default DataManager;\nvar _c;\n$RefreshReg$(_c, \"DataManager\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DataManager","_s","data","setData","newData","setNewData","error","setError","selectedId","setSelectedId","fetchData","response","fetch","result","json","ok","console","message","statusText","addData","method","headers","body","JSON","stringify","name","deleteData","id","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","type","value","onChange","e","target","placeholder","onClick","map","item","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive - gitam.in/Desktop/My files/react/project/my-app/src/DataManager.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst DataManager = () => {\r\n    const [data, setData] = useState([]);\r\n    const [newData, setNewData] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [selectedId, setSelectedId] = useState(null);\r\n\r\n    // Fetch data from the backend\r\n    const fetchData = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/curd/getdata');\r\n            const result = await response.json();\r\n            if (response.ok) {\r\n                setData(result);\r\n            } else {\r\n                console.error('Failed to fetch data:', result.message || response.statusText);\r\n                setError(result.message || 'Failed to fetch data');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n            setError('Failed to fetch data');\r\n        }\r\n    };\r\n\r\n    // Add new data\r\n    const addData = async () => {\r\n        if (!newData) {\r\n            setError('Please enter some data');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/curd/adddata', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ name: newData })\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok) {\r\n                fetchData(); // Refresh the data list\r\n                setNewData('');\r\n                setError('');\r\n            } else {\r\n                console.error('Failed to add data:', result.message || response.statusText);\r\n                setError(result.message || 'Failed to add data');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error adding data:', error);\r\n            setError('Failed to add data');\r\n        }\r\n    };\r\n\r\n    // Delete data by ID\r\n    const deleteData = async (id) => {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/curd/deletedata', {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'id': id // Send ID as header\r\n                }\r\n            });\r\n\r\n            if (response.ok) {\r\n                fetchData(); // Refresh the data list\r\n                setError('');\r\n            } else {\r\n                const result = await response.json();\r\n                console.error('Failed to delete data:', result.message || response.statusText);\r\n                setError(result.message || 'Failed to delete data');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error deleting data:', error);\r\n            setError('Failed to delete data');\r\n        }\r\n    };\r\n\r\n    // Use useEffect to fetch data when the component mounts\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Data Manager</h1>\r\n            {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n            <div>\r\n                <input\r\n                    type=\"text\"\r\n                    value={newData}\r\n                    onChange={(e) => setNewData(e.target.value)}\r\n                    placeholder=\"Enter new data\"\r\n                />\r\n                <button onClick={addData}>Add Data</button>\r\n            </div>\r\n\r\n            <ul>\r\n                {data.map((item) => (\r\n                    <li key={item.id}>\r\n                        {item.name} (ID: {item.id})\r\n                        <button onClick={() => deleteData(item.id)}>Delete</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DataManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}